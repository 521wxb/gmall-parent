# 配置数据源
spring:
  shardingsphere:
    datasource:
      names: master_01,master_01_slave_01,master_01_slave_02,master_02,master_02_slave_01,master_02_slave_02
      master_01:
        type: com.zaxxer.hikari.HikariDataSource
        driverClassName: com.mysql.jdbc.Driver
        jdbcUrl: jdbc:mysql://192.168.200.130:3306/gmall_order_01?useSSL=false&characterEncoding=UTF8
        username: root
        password: root
      master_01_slave_01:
        type: com.zaxxer.hikari.HikariDataSource
        driverClassName: com.mysql.jdbc.Driver
        jdbcUrl: jdbc:mysql://192.168.200.130:3307/gmall_order_01?useSSL=false&characterEncoding=UTF8
        username: root
        password: root
      master_01_slave_02:
        type: com.zaxxer.hikari.HikariDataSource
        driverClassName: com.mysql.jdbc.Driver
        jdbcUrl: jdbc:mysql://192.168.200.130:3308/gmall_order_01?useSSL=false&characterEncoding=UTF8
        username: root
        password: root
      master_02:
        type: com.zaxxer.hikari.HikariDataSource
        driverClassName: com.mysql.jdbc.Driver
        jdbcUrl: jdbc:mysql://192.168.200.130:3306/gmall_order_02?useSSL=false&characterEncoding=UTF8
        username: root
        password: root
      master_02_slave_01:
        type: com.zaxxer.hikari.HikariDataSource
        driverClassName: com.mysql.jdbc.Driver
        jdbcUrl: jdbc:mysql://192.168.200.130:3307/gmall_order_02?useSSL=false&characterEncoding=UTF8
        username: root
        password: root
      master_02_slave_02:
        type: com.zaxxer.hikari.HikariDataSource
        driverClassName: com.mysql.jdbc.Driver
        jdbcUrl: jdbc:mysql://192.168.200.130:3308/gmall_order_02?useSSL=false&characterEncoding=UTF8
        username: root
        password: root
    rules:
      readwrite-splitting:
        data-sources:
          order-rw-01:  # 逻辑数据库的名称
            type: Static
            props:
              write-data-source-name: master_01
              read-data-source-names: master_01_slave_01,master_01_slave_02
            loadBalancerName: my_lb_alg
          order-rw-02:  # 逻辑数据库的名称
            type: Static
            props:
              write-data-source-name: master_02
              read-data-source-names: master_02_slave_01,master_02_slave_02
            loadBalancerName: my_lb_alg
        load-balancers:
          my_lb_alg:
            type: ROUND_ROBIN
      sharding:
        default-database-strategy:
          standard:
            sharding-column: user_id
            sharding-algorithm-name: database_inline
        sharding-algorithms:
          database_inline:
            type: INLINE    # 表示支持行内表达式
            props:
              algorithm-expression: order-rw-0$->{user_id % 2 + 1} # master_0$->{ user_id % 2 + 1}
          order_info_table_sharding:
            type: INLINE
            props:
              algorithm-expression: order_info_0$->{ user_id % 3 + 1}
          order_detail_table_sharding:
            type: INLINE
            props:
              algorithm-expression: order_detail_0$->{ user_id % 3 + 1}
          order_status_log_table_sharding:
            type: INLINE
            props:
              algorithm-expression: order_status_log_0$->{ user_id % 3 + 1}
          payment_info_table_sharding:
            type: INLINE
            props:
              algorithm-expression: payment_info_0$->{ user_id % 3 + 1}
        tables:
          order_info:
            actualDataNodes: order-rw-0$->{1..2}.order_info_0$->{1..3}
            tableStrategy:
              standard:
                shardingColumn: user_id
                shardingAlgorithmName: order_info_table_sharding
            keyGenerateStrategy:
              column: id
              keyGeneratorName: snowflake
          order_detail:
            actualDataNodes: order-rw-0$->{1..2}.order_detail_0$->{1..3}
            tableStrategy:
              standard:
                shardingColumn: user_id
                shardingAlgorithmName: order_detail_table_sharding
            keyGenerateStrategy:
              column: id
              keyGeneratorName: snowflake
          order_status_log:
            actualDataNodes: order-rw-0$->{1..2}.order_status_log_0$->{1..3}
            tableStrategy:
              standard:
                shardingColumn: user_id
                shardingAlgorithmName: order_status_log_table_sharding
            keyGenerateStrategy:
              column: id
              keyGeneratorName: snowflake
          payment_info:
            actualDataNodes: order-rw-0$->{1..2}.payment_info_0$->{1..3}
            tableStrategy:
              standard:
                shardingColumn: user_id
                shardingAlgorithmName: payment_info_table_sharding
            keyGenerateStrategy:
              column: id
              keyGeneratorName: snowflake
        key-generators:
          snowflake:
            type: SNOWFLAKE
            props:
              worker-id: ${random.int(1000)}
    props:
      sql-show: true
